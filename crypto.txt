Caesar Cipher

#include <stdio.h>
#include <ctype.h>

int main() {
    char msg[100];
    int key, i;

    printf("Enter message: ");
    gets(msg);
    printf("Enter key: ");
    scanf("%d", &key);

    for (i = 0; msg[i] != '\0'; i++) {
        if (isalpha(msg[i])) {
            char base = isupper(msg[i]) ? 'A' : 'a';
            msg[i] = (msg[i] - base + key) % 26 + base;
        }
    }

    printf("Encrypted: %s\n", msg);
    return 0;
}

#########################################################
GCD USING EUCLIDEAN 

#include <stdio.h>

int main() {
    int a, b;
    printf("Enter two numbers: ");
    scanf("%d%d", &a, &b);

    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }

    printf("GCD is %d\n", a);
    return 0;
}
######################################################

DIFFIE HELMAN


#include <stdio.h>
#include <math.h>

int power(int base, int exp, int mod) {
    int result = 1;
    for (int i = 0; i < exp; i++)
        result = (result * base) % mod;
    return result;
}

int main() {
    int p = 23, g = 5;  // Public
    int a = 6, b = 15;  // Private

    int A = power(g, a, p);
    int B = power(g, b, p);

    int keyA = power(B, a, p);
    int keyB = power(A, b, p);

    printf("Shared key (A): %d\n", keyA);
    printf("Shared key (B): %d\n", keyB);
    return 0;
}

#######################################################

COPRIME OR NOT


#include <stdio.h>

int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int main() {
    int a, b;
    printf("Enter two numbers: ");
    scanf("%d%d", &a, &b);

    if (gcd(a, b) == 1)
        printf("Coprime\n");
    else
        printf("Not Coprime\n");
    return 0;
}



################################################

HILL CIPHER

#include <stdio.h>
#include <string.h>

int main() {
    int key[2][2] = {{3, 3}, {2, 5}};
    char msg[3];
    int vector[2], result[2];

    printf("Enter 2-letter message (uppercase): ");
    scanf("%s", msg);

    for (int i = 0; i < 2; i++)
        vector[i] = msg[i] - 'A';

    for (int i = 0; i < 2; i++) {
        result[i] = 0;
        for (int j = 0; j < 2; j++)
            result[i] += key[i][j] * vector[j];
        result[i] %= 26;
    }

    printf("Encrypted: ");
    for (int i = 0; i < 2; i++)
        printf("%c", result[i] + 'A');
    printf("\n");

    return 0;
}


###################################################

MONOALPHABETIC

#include <stdio.h>
#include <string.h>

int main() {
    char key[26] = "QWERTYUIOPASDFGHJKLZXCVBNM";
    char msg[100];
    int i;

    printf("Enter message (uppercase): ");
    gets(msg);

    for (i = 0; msg[i] != '\0'; i++) {
        if (msg[i] >= 'A' && msg[i] <= 'Z')
            msg[i] = key[msg[i] - 'A'];
    }

    printf("Encrypted: %s\n", msg);
    return 0;
}


###############################################
Rail Fence Cipher 

#include <stdio.h>
#include <string.h>

int main() {
    char msg[100];
    char rail[10][100];  // Up to 10 rails
    int len, i, row = 0, dir = 1; // dir=1 means going down, dir=-1 means going up
    int d = 3; // Change depth as needed
    int rail_index[10] = {0}; // Index tracker for each rail

    printf("Enter message: ");
    fgets(msg, sizeof(msg), stdin); // safer than gets
    msg[strcspn(msg, "\n")] = '\0';  // Remove trailing newline

    len = strlen(msg);

    for (i = 0; i < len; i++) {
        rail[row][rail_index[row]++] = msg[i];

        // Change direction if we hit top or bottom rail
        if (row == 0)
            dir = 1;
        else if (row == d - 1)
            dir = -1;

        row += dir;
    }

    // Print encrypted message
    printf("Encrypted: ");
    for (i = 0; i < d; i++) {
        rail[i][rail_index[i]] = '\0'; // null terminate each rail
        printf("%s", rail[i]);
    }
    printf("\n");

    return 0;
}

